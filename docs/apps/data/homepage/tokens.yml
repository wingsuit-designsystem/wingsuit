bg: 'green-light'
content: '<h2>1. Define your Design Tokens</h2><p>Everything starts with well defined Design Tokens. <br>
    Collect all your spaces colors typography from your design before you start coding components. Good Design Tokens are a big timesaver!</p>
     '
badge_headline: 'Choose your technology:'
data:
  - title: 'TailwindCSS'
    intro: '<p>TailwindCSS is the <b>API</b> for your design system. All tailwind.config.js settings are automaticly documented in Storybook. </p>'
    key: "tailwind"
    contents:
      - key: 'colors'
        title: 'Colors'
        content: |
          <div class="p-6">
          <img src="/images/colors_tailwind.svg">
          </div>
    codes:
      - key: 'yaml'
        title: 'tailwind.config.js'
        format: 'javascript'
        code: |
          module.exports = {
           ...
           theme: {
             colors: {
               red: colors.rose,
               teal: {
                 200: '#e6fffa'
                 300: '#b2f5ea'
                 500: '#00ffd1'
               },
               purple: {
                 200: '#faf5ff'
                 500: '#8000ff'
               },
             },
           ...
           };
      - key: 'mdx'
        title: 'colors.mdx'
        format: 'jsx'
        code: |
          import { Meta, ColorPalette, ColorItem, Subtitle } from '@storybook/addon-docs/blocks';
          const tailwindConfig = require('../../config/silo/tailwind.json');
          const colors = tailwindConfig.tailwind.theme.colors;

          &lt;Meta title="Tokens/Colors" /&gt;

          # Colors Matter

          ## A palette of great-looking, well-balanced colors.
          &lt;ColorPalette&gt;
          {
            Object.keys(colors).map((key)=>{
                const color = typeof colors[ key ] === 'string' ? [ colors[ key ] ]: colors[ key ];
                const title = `.${ key }`;
                return (
                  &lt;ColorItem key={ key } title={ title } colors={ color } /&gt;
                )
            })
          }
          &lt;/ColorPalette&gt;

  - title: 'SCSS'
    key: "scss"
    intro: "<p>Not every SCSS variable is a Design Token. Collect your Tokens in SCSS collections and export them. Wingsuit will document automaticly exported SCSS variables.</p>"
    contents:
      -
        key: 'colors'
        title: 'Colors'
        content: |
          <div class="p-6">
          <img src="/images/colors_scss.svg">
          </div>
    codes:
      -
        key: 'variables'
        title: 'variabels.scss'
        format: 'scss'
        code: |
          $primary:       $blue !default;
          $secondary:     $gray-600 !default;
          $success:       $green !default;
          $info:          $cyan !default;
          $warning:       $yellow !default;
          $danger:        $red !default;
          $light:         $gray-100 !default;
          $dark:          $gray-800 !default;

          $theme-colors: () !default;
          $theme-colors: map-merge(
          (
          "primary":    $primary,
          "secondary":  $secondary,
          "success":    $success,
          "info":       $info,
          "warning":    $warning,
          "danger":     $danger,
          "light":      $light,
          "dark":       $dark
          ),
          $theme-colors
          );
      -
        key: 'mdx'
        title: 'colors.mdx'
        format: 'jsx'
        code: |
          import { Meta, ColorPalette, ColorItem, Subtitle } from '@storybook/addon-docs/blocks';
          const colors = require('tokens/exports/_colors.scss');

          &lt;Meta title=\"Tokens/Colors\" /&gt;

          # Colors Matter

          ## A palette of great-looking, well-balanced colors.
          &lt;ColorPalette&gt;
          {
            Object.keys(colors).map((key)=>{
                                             const color = typeof colors[key] === 'string' ? [colors[key]] : colors[key];
                                             const title = `.${key}`;
                                             return (
            &lt;ColorItem key={key} title={title} colors={color} /&gt;
                                             )
          })
          }
          &lt;/ColorPalette&gt;
